version: 2

references:

  docker_python: &docker_python
    working_directory: ~/mixt
    docker:
      - environment: &default_environ
          MIXT_DEBUG=True

  docker_python_36: &docker_python_36
    <<: *docker_python
    docker:
      - image: circleci/python:3.6

  docker_python_37: &docker_python_37
    <<: *docker_python
    docker:
      - image: circleci/python:3.7

  docker_python_38: &docker_python_38
    <<: *docker_python
    docker:
      - image: circleci/python:3.8

  # build steps to save/restore the directory used by pip to cache downloaded packages
  save_pip_cache: &save_pip_cache
    save_cache:
      key: v1-pip-cache-{{ .Branch }}-{{ .Revision }}
      paths:
        - ~/.cache/pip
  restore_pip_cache: &restore_pip_cache
    restore_cache:
      keys:
        - v1-pip-cache-{{ .Branch }}-{{ .Revision }}
        - v1-pip-cache-{{ .Branch }}
        - v1-pip-cache

  # shortcut to attach the workspace before each job
  attach_workspace: &attach_workspace
    attach_workspace:
      at: "~/"


  # get the code from git and save the repo to pass it to the next job
  job_checkout_code: &job_checkout_code
    steps:
      - checkout
      - persist_to_workspace:
          root: "~/"
          paths:
            - mixt

  # install the project code and dependencies and save the venv and pip cache
  # ssh config is needed because we actually use a git+ssh dependency on our setup.py
  job_install_code: &job_install_code
    steps:
      - *attach_workspace
      - *restore_pip_cache
      - run:
          name: Install code
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            make dev
      - *save_pip_cache
      - persist_to_workspace:
          root: "~/"
          paths:
            - venv
            - mixt

  # 5 next jobs are linters: mypy, isort, black, flake8 and pylint
  # they all use the workspace
  job_linter_mypy: &job_linter_mypy
    steps:
      - *attach_workspace
      - run:
          name: Run "mypy" linter
          command: |
            source ~/venv/bin/activate
            make mypy

  job_linter_isort: &job_linter_isort
    steps:
      - *attach_workspace
      - run:
          name: Run "isort" linter
          command: |
            source ~/venv/bin/activate
            make check-isort

  job_linter_black: &job_linter_black
    steps:
      - *attach_workspace
      - run:
          name: Run "black" linter
          command: |
            source ~/venv/bin/activate
            make check-black

  job_linter_flake8: &job_linter_flake8
    steps:
      - *attach_workspace
      - run:
          name: Run "flake8" linter
          command: |
            source ~/venv/bin/activate
            make flake8

  job_linter_pylint: &job_linter_pylint
    steps:
      - *attach_workspace
      - run:
          name: Run "pylint" linter
          command: |
            source ~/venv/bin/activate
            make pylint

  # run the tests suite
  job_run_tests: &job_run_tests
    steps:
      - *attach_workspace
      - run:
          name: Run tests
          command: |
            source ~/venv/bin/activate
            make test

  # run check and tests for every commit in the history for which it is not already done
  job_check_every_commit: &job_check_every_commit
    steps:
      - *attach_workspace
      - *restore_pip_cache
      - type: shell
        name: Install system dependencies
        command: sudo apt-get update -qq -y && sudo apt-get install -y curl jq
      - run:
          name: Check every commits
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            source ~/venv/bin/activate
            .circleci/check-every-commit.sh

  # will build the python package, using the tag as the base version, suffixed with info from git describe if not a tag
  job_build_python_package: &job_build_python_package
    steps:
      - *attach_workspace
      - run:
          name: Build package
          command: |
            sed -i -e "s/^version = .*$/version = $(git describe --tags)/" setup.cfg
            source ~/venv/bin/activate
            make dist
      - store_artifacts:
          path: dist/
      - save_cache:
          key: v1-mixt-dist-{{ .Revision }}
          paths:
            - ~/mixt/dist

  # will test that the python wheel package is installable and works
  job_test_python_package_whl: &job_test_python_package_whl
    steps:
      - checkout
      - *restore_pip_cache
      - restore_cache:
          keys:
            - v1-mixt-dist-{{ .Revision }}
      - run:
          name: Check package
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ls -la
            mv dist _dist
            rm -r src
            make full-clean
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            pip install $(ls -tr _dist/*.whl | tail -n 1)
            mixt-post-install
            diff -q <(python -m mixt.examples.simple) <(echo '<div title="Greeting">Hello, World</div>') || (echo 'Unexpected output for "python -m mixt.examples.simple"')
            pip install $(ls -tr _dist/*.whl | tail -n 1)[test]
            make tests

  # will test that the python tar.gz package is installable and works
  job_test_python_package_targz: &job_test_python_package_targz
    steps:
      - checkout
      - *restore_pip_cache
      - restore_cache:
          keys:
            - v1-mixt-dist-{{ .Revision }}
      - run:
          name: Check package
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ls -la
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            mv dist _dist
            rm -r src
            make full-clean
            python -m venv ~/venv
            source ~/venv/bin/activate
            pip install --upgrade pip
            pip install $(ls -tr _dist/*.tar.gz | tail -n 1)
            mixt-post-install
            diff -q <(python -m mixt.examples.simple) <(echo '<div title="Greeting">Hello, World</div>') || (echo 'Unexpected output for "python -m mixt.examples.simple"')
            pip install $(ls -tr _dist/*.tar.gz | tail -n 1)[test]
            make tests

  # will check that documentation is up to date
  job_check_doc: &job_check_doc
    steps:
      - *attach_workspace
      - run:
          name: Build doc
          command: |
            source ~/venv/bin/activate
            make check-doc
      - store_artifacts:
          path: docs/
      - persist_to_workspace:
          root: "~/"
          paths:
            - mixt/docs


# jobs definition: they are used in ``workflows``
jobs:

  checkout_code-py36:
    <<: *docker_python_36
    <<: *job_checkout_code
  install_code-py36:
    <<: *docker_python_36
    <<: *job_install_code
  run_tests-py36:
    <<: *docker_python_36
    <<: *job_run_tests
  build_python_package-py36:
    <<: *docker_python_36
    <<: *job_build_python_package
  test_python_package_whl-py36:
    <<: *docker_python_36
    <<: *job_test_python_package_whl
  test_python_package_targz-py36:
    <<: *docker_python_36
    <<: *job_test_python_package_targz

  checkout_code-py37:
    <<: *docker_python_37
    <<: *job_checkout_code
  install_code-py37:
    <<: *docker_python_37
    <<: *job_install_code
  run_tests-py37:
    <<: *docker_python_37
    <<: *job_run_tests
  build_python_package-py37:
    <<: *docker_python_37
    <<: *job_build_python_package
  test_python_package_whl-py37:
    <<: *docker_python_37
    <<: *job_test_python_package_whl
  test_python_package_targz-py37:
    <<: *docker_python_37
    <<: *job_test_python_package_targz

  checkout_code-py38:
    <<: *docker_python_38
    <<: *job_checkout_code
  install_code-py38:
    <<: *docker_python_38
    <<: *job_install_code
  linter_mypy-py38:
    <<: *docker_python_38
    <<: *job_linter_mypy
  linter_isort-py38:
    <<: *docker_python_38
    <<: *job_linter_isort
  linter_black-py38:
    <<: *docker_python_38
    <<: *job_linter_black
  linter_flake8-py38:
    <<: *docker_python_38
    <<: *job_linter_flake8
  linter_pylint-py38:
    <<: *docker_python_38
    <<: *job_linter_pylint
  run_tests-py38:
    <<: *docker_python_38
    <<: *job_run_tests
  check_every_commit-py38:
    <<: *docker_python_38
    <<: *job_check_every_commit
  build_python_package-py38:
    <<: *docker_python_38
    <<: *job_build_python_package
  test_python_package_whl-py38:
    <<: *docker_python_38
    <<: *job_test_python_package_whl
  test_python_package_targz-py38:
    <<: *docker_python_38
    <<: *job_test_python_package_targz
  check_doc-py38:
    <<: *docker_python_38
    <<: *job_check_doc


workflows:
  version: 2

  mixt-py36:
    jobs:
      - checkout_code-py36
      - install_code-py36:
          requires:
            - checkout_code-py36
      - run_tests-py36:
          requires:
            - install_code-py36
      - build_python_package-py36:
          requires:
            - run_tests-py36
      - test_python_package_whl-py36:
          requires:
            - build_python_package-py36
      - test_python_package_targz-py36:
          requires:
            - build_python_package-py36

  mixt-py37:
    jobs:
      - checkout_code-py37
      - install_code-py37:
          requires:
            - checkout_code-py37
      - run_tests-py37:
          requires:
            - install_code-py37
      - build_python_package-py37:
          requires:
            - run_tests-py37
      - test_python_package_whl-py37:
          requires:
            - build_python_package-py37
      - test_python_package_targz-py37:
          requires:
            - build_python_package-py37

  mixt-py38:
    jobs:
      - checkout_code-py38
      - install_code-py38:
          requires:
            - checkout_code-py38
      - linter_mypy-py38:
          requires:
            - install_code-py38
      - linter_isort-py38:
          requires:
            - install_code-py38
      - linter_black-py38:
          requires:
            - install_code-py38
      - linter_flake8-py38:
          requires:
            - install_code-py38
      - linter_pylint-py38:
          requires:
            - install_code-py38
      - run_tests-py38:
          requires:
            - install_code-py38
      - check_every_commit-py38:
          requires:
            - install_code-py38
      - build_python_package-py38:
          requires:
            - linter_mypy-py38
            - linter_isort-py38
            - linter_black-py38
            - linter_flake8-py38
            - linter_pylint-py38
            - run_tests-py38
      - check_doc-py38:
          requires:
            - linter_mypy-py38
            - linter_isort-py38
            - linter_black-py38
            - linter_flake8-py38
            - linter_pylint-py38
            - run_tests-py38
      - test_python_package_whl-py38:
          requires:
            - build_python_package-py38
      - test_python_package_targz-py38:
          requires:
            - build_python_package-py38
